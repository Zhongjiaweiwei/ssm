<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
    MyBatis核心配置文件中，标签的顺序：
    properties?,settings?,typeAliases?,typeHandlers?,
    objectFactory?,objectWrapperFactory?,reflectorFactory?,
    plugins?,environments?,databaseIdProvider?,mappers?
    -->
    <!--引入properties文件-->
    <properties resource="jdbc.properties"/>
    <settings>
        <!--将下划线映射为驼峰-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--
        分步查询的优点：可以实现延迟加载
        但是必须在核心配置文件中设置全局配置信息：
        lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载
        aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。
        否则，每个属性会按需加载
        此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和
        collection中的fetchType属性设置当前的分步查询是否使用延迟加载，
        fetchType="lazy(延迟加载)|eager(立即加载)"
        -->
        <!--开启延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--开启按需加载，默认为false
        true就是不管需不需要，都会加载
        false就是如果不需要其他类的信息，那么其他类的sql语句就不会加载
        -->
        <setting name="aggressiveLazyLoading" value="false"/>

    </settings>
    <!--设置类型别名-->
    <typeAliases>
        <!--
        typeAlias：设置某个类型的别名
        属性：
        type：设置需要设置别名的类型
        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名
        且不区分大小写
        -->
        <!--<typeAlias type="com.atguigu.mybatis.com.zjw.pojo.User"></typeAlias>-->
        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->
        <package name="org.example.com.zjw.pojo"/>
    </typeAliases>
    <!--设置分页插件-->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
    </plugins>
    <!--
    environments：配置多个连接数据库的环境
    属性：
    default：设置默认使用的环境的id
    -->
    <environments default="development">
        <!--
    environment：配置某个具体的环境
    属性：
    id：表示连接数据库的环境的唯一标识，不能重复
    -->
        <environment id="development">
            <!--
        transactionManager：设置事务管理方式
        属性：
        type="JDBC|MANAGED"
        JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事
        务的提交或回滚需要手动处理
        MANAGED：被管理，例如Spring
        -->
            <transactionManager type="JDBC"/>
            <!--
            dataSource：配置数据源
            属性：
            type：设置数据源的类型
            type="POOLED|UNPOOLED|JNDI"
            POOLED：表示使用数据库连接池缓存数据库连接
            UNPOOLED：表示不使用数据库连接池
            JNDI：表示使用上下文中的数据源
            -->
            <dataSource type="POOLED">
                <!--设置连接数据库的驱动-->
                <property name="driver" value="${jdbc.driver}"/>
                <!--设置连接数据库的连接地址-->
                <property name="url" value="${jdbc.url}"/>
                <!--设置连接数据库的用户名-->
                <property name="username" value="${jdbc.username}"/>
                <!--设置连接数据库的密码-->
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url"
                          value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--引入映射文件-->
    <mappers>
        <!--<mapper resource="mappers/UserMapper.xml"/>-->
        <!--
        以包为单位引入映射文件
        要求：
        1、mapper接口所在的包要和映射文件所在的包一致
        2、mapper接口要和映射文件的名字一致
        -->
        <package name="org.example.mapper"/>
    </mappers>
</configuration>